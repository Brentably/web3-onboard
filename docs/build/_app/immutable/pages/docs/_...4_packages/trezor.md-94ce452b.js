import{S as X,i as Y,s as Z,e as H,t as _,k as E,w as F,c as I,a as L,h as w,d as e,m as z,x as A,b as N,g as r,M as U,y as i,q as f,o as $,B as m,E as V}from"../../../chunks/index-c32358ff.js";import"../../../chunks/scroll-5387a6f1.js";import{C as R}from"../../../chunks/CodeFence-ac7b69e1.js";import{L as K}from"../../../chunks/Link-d3089e65.js";/* empty css                                                            */import{T as ss,a as Q}from"../../../chunks/Tabs-f2c9522f.js";import"../../../chunks/singletons-37dfeae3.js";import"../../../chunks/contexts-2aef7541.js";function ns(c){let n;return{c(){n=_("#")},l(l){n=w(l,"#")},m(l,a){r(l,n,a)},d(l){l&&e(n)}}}function as(c){let n,l;return n=new R({props:{lang:"bash",ext:"sh",linesCount:2,rawCode:`yarn add @web3-onboard/trezor
`,showCopyCode:!0,code:`<pre><code><span class="line"><span style="color: #A6ACCD">yarn add @web3-onboard/trezor</span></span>
<span class="line"></span></code></pre>`}}),{c(){F(n.$$.fragment)},l(a){A(n.$$.fragment,a)},m(a,t){i(n,a,t),l=!0},p:V,i(a){l||(f(n.$$.fragment,a),l=!0)},o(a){$(n.$$.fragment,a),l=!1},d(a){m(n,a)}}}function ls(c){let n,l;return n=new R({props:{lang:"bash",ext:"sh",linesCount:2,rawCode:`npm install @web3-onboard/trezor
`,showCopyCode:!0,code:`<pre><code><span class="line"><span style="color: #A6ACCD">npm install @web3-onboard/trezor</span></span>
<span class="line"></span></code></pre>`}}),{c(){F(n.$$.fragment)},l(a){A(n.$$.fragment,a)},m(a,t){i(n,a,t),l=!0},p:V,i(a){l||(f(n.$$.fragment,a),l=!0)},o(a){$(n.$$.fragment,a),l=!1},d(a){m(n,a)}}}function ps(c){let n,l,a,t;return n=new Q({props:{value:"yarn",$$slots:{default:[as]},$$scope:{ctx:c}}}),a=new Q({props:{value:"npm",$$slots:{default:[ls]},$$scope:{ctx:c}}}),{c(){F(n.$$.fragment),l=E(),F(a.$$.fragment)},l(o){A(n.$$.fragment,o),l=z(o),A(a.$$.fragment,o)},m(o,C){i(n,o,C),r(o,l,C),i(a,o,C),t=!0},p(o,C){const y={};C&1&&(y.$$scope={dirty:C,ctx:o}),n.$set(y);const D={};C&1&&(D.$$scope={dirty:C,ctx:o}),a.$set(D)},i(o){t||(f(n.$$.fragment,o),f(a.$$.fragment,o),t=!0)},o(o){$(n.$$.fragment,o),$(a.$$.fragment,o),t=!1},d(o){m(n,o),o&&e(l),m(a,o)}}}function os(c){let n;return{c(){n=_("#")},l(l){n=w(l,"#")},m(l,a){r(l,n,a)},d(l){l&&e(n)}}}function es(c){let n;return{c(){n=_("#")},l(l){n=w(l,"#")},m(l,a){r(l,n,a)},d(l){l&&e(n)}}}function ts(c){let n,l,a,t,o,C,y,D,S,W,B,M,u,b,j,P,h,d,g,J,q,k,G;return D=new K({props:{class:"header-anchor",href:"#install","aria-hidden":"true",$$slots:{default:[ns]},$$scope:{ctx:c}}}),B=new ss({props:{values:["yarn","npm"],$$slots:{default:[ps]},$$scope:{ctx:c}}}),b=new K({props:{class:"header-anchor",href:"#options","aria-hidden":"true",$$slots:{default:[os]},$$scope:{ctx:c}}}),h=new R({props:{lang:"typescript",ext:"ts",linesCount:38,code:`<pre><code><span class="line"><span style="color: #C792EA">type</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">TrezorOptions</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">email</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">appUrl</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">customNetwork</span><span style="color: #89DDFF">?:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">CustomNetwork</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">interface</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">CustomNetwork</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">networkId</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">number</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">genesis</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">GenesisBlock</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">hardforks</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Hardfork</span><span style="color: #A6ACCD">[]</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">bootstrapNodes</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">BootstrapNode</span><span style="color: #A6ACCD">[]</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">interface</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">GenesisBlock</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">hash</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">timestamp</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">|</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">null</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">gasLimit</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">number</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">difficulty</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">number</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">nonce</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">extraData</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">stateRoot</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">interface</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Hardfork</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">block</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">number</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">|</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">null</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">interface</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">BootstrapNode</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">ip</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">port</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">number</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">|</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">network</span><span style="color: #89DDFF">?:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">chainId</span><span style="color: #89DDFF">?:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">number</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">id</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">location</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">comment</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span></code></pre>`}}),g=new K({props:{class:"header-anchor",href:"#usage","aria-hidden":"true",$$slots:{default:[es]},$$scope:{ctx:c}}}),k=new R({props:{lang:"typescript",ext:"ts",linesCount:19,code:`<pre><code><span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> Onboard </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">@web3-onboard/core</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> trezorModule </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">@web3-onboard/trezor</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> trezor </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">trezorModule</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">email</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">&lt;EMAIL_CONTACT&gt;</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">appUrl</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">&lt;APP_URL&gt;</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> onboard </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Onboard</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #464B5D; font-style: italic">// ... other Onboard options</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">wallets</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span></span>
<span class="line"><span style="color: #A6ACCD">    trezor</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #464B5D; font-style: italic">//... other wallets</span></span>
<span class="line"><span style="color: #A6ACCD">  ]</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> connectedWallets </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">await</span><span style="color: #A6ACCD"> onboard</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">connectWallet</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(connectedWallets)</span></span>
<span class="line"></span></code></pre>`}}),{c(){n=H("h1"),l=_("@web3-onboard/trezor"),a=E(),t=H("p"),o=_("Wallet module for connecting Trezor hardware wallets to web3-onboard"),C=E(),y=H("h3"),F(D.$$.fragment),S=_(" Install"),W=E(),F(B.$$.fragment),M=E(),u=H("h3"),F(b.$$.fragment),j=_(" Options"),P=E(),F(h.$$.fragment),d=H("h3"),F(g.$$.fragment),J=_(" Usage"),q=E(),F(k.$$.fragment),this.h()},l(s){n=I(s,"H1",{});var p=L(n);l=w(p,"@web3-onboard/trezor"),p.forEach(e),a=z(s),t=I(s,"P",{});var O=L(t);o=w(O,"Wallet module for connecting Trezor hardware wallets to web3-onboard"),O.forEach(e),C=z(s),y=I(s,"H3",{id:!0,tabindex:!0});var x=L(y);A(D.$$.fragment,x),S=w(x," Install"),x.forEach(e),W=z(s),A(B.$$.fragment,s),M=z(s),u=I(s,"H3",{id:!0,tabindex:!0});var v=L(u);A(b.$$.fragment,v),j=w(v," Options"),v.forEach(e),P=z(s),A(h.$$.fragment,s),d=I(s,"H3",{id:!0,tabindex:!0});var T=L(d);A(g.$$.fragment,T),J=w(T," Usage"),T.forEach(e),q=z(s),A(k.$$.fragment,s),this.h()},h(){N(y,"id","install"),N(y,"tabindex","-1"),N(u,"id","options"),N(u,"tabindex","-1"),N(d,"id","usage"),N(d,"tabindex","-1")},m(s,p){r(s,n,p),U(n,l),r(s,a,p),r(s,t,p),U(t,o),r(s,C,p),r(s,y,p),i(D,y,null),U(y,S),r(s,W,p),i(B,s,p),r(s,M,p),r(s,u,p),i(b,u,null),U(u,j),r(s,P,p),i(h,s,p),r(s,d,p),i(g,d,null),U(d,J),r(s,q,p),i(k,s,p),G=!0},p(s,[p]){const O={};p&1&&(O.$$scope={dirty:p,ctx:s}),D.$set(O);const x={};p&1&&(x.$$scope={dirty:p,ctx:s}),B.$set(x);const v={};p&1&&(v.$$scope={dirty:p,ctx:s}),b.$set(v);const T={};p&1&&(T.$$scope={dirty:p,ctx:s}),g.$set(T)},i(s){G||(f(D.$$.fragment,s),f(B.$$.fragment,s),f(b.$$.fragment,s),f(h.$$.fragment,s),f(g.$$.fragment,s),f(k.$$.fragment,s),G=!0)},o(s){$(D.$$.fragment,s),$(B.$$.fragment,s),$(b.$$.fragment,s),$(h.$$.fragment,s),$(g.$$.fragment,s),$(k.$$.fragment,s),G=!1},d(s){s&&e(n),s&&e(a),s&&e(t),s&&e(C),s&&e(y),m(D),s&&e(W),m(B,s),s&&e(M),s&&e(u),m(b),s&&e(P),m(h,s),s&&e(d),m(g),s&&e(q),m(k,s)}}}class fs extends X{constructor(n){super(),Y(this,n,null,ts,Z,{})}}export{fs as default};
