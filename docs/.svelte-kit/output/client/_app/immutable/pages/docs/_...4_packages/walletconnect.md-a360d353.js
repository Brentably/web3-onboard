import{S as Q,i as X,s as Z,e as I,t as g,k,w as C,c as q,a as H,h,d as t,m as x,x as F,b as W,g as r,M as R,y as f,q as $,o as A,B as m,E as N}from"../../../chunks/index-c32358ff.js";import"../../../chunks/scroll-5387a6f1.js";import{C as G}from"../../../chunks/CodeFence-ac7b69e1.js";import{L as J}from"../../../chunks/Link-d3089e65.js";/* empty css                                                            */import{T as ss,a as K}from"../../../chunks/Tabs-f2c9522f.js";import"../../../chunks/singletons-37dfeae3.js";import"../../../chunks/contexts-2aef7541.js";function ns(c){let n;return{c(){n=g("#")},l(l){n=h(l,"#")},m(l,a){r(l,n,a)},d(l){l&&t(n)}}}function as(c){let n,l;return n=new G({props:{lang:"bash",ext:"sh",linesCount:2,rawCode:`yarn add @web3-onboard/walletconnect
`,showCopyCode:!0,code:`<pre><code><span class="line"><span style="color: #A6ACCD">yarn add @web3-onboard/walletconnect</span></span>
<span class="line"></span></code></pre>`}}),{c(){C(n.$$.fragment)},l(a){F(n.$$.fragment,a)},m(a,p){f(n,a,p),l=!0},p:N,i(a){l||($(n.$$.fragment,a),l=!0)},o(a){A(n.$$.fragment,a),l=!1},d(a){m(n,a)}}}function ls(c){let n,l;return n=new G({props:{lang:"bash",ext:"sh",linesCount:2,rawCode:`npm install @web3-onboard/walletconnect
`,showCopyCode:!0,code:`<pre><code><span class="line"><span style="color: #A6ACCD">npm install @web3-onboard/walletconnect</span></span>
<span class="line"></span></code></pre>`}}),{c(){C(n.$$.fragment)},l(a){F(n.$$.fragment,a)},m(a,p){f(n,a,p),l=!0},p:N,i(a){l||($(n.$$.fragment,a),l=!0)},o(a){A(n.$$.fragment,a),l=!1},d(a){m(n,a)}}}function es(c){let n,l,a,p;return n=new K({props:{value:"yarn",$$slots:{default:[as]},$$scope:{ctx:c}}}),a=new K({props:{value:"npm",$$slots:{default:[ls]},$$scope:{ctx:c}}}),{c(){C(n.$$.fragment),l=k(),C(a.$$.fragment)},l(o){F(n.$$.fragment,o),l=x(o),F(a.$$.fragment,o)},m(o,i){f(n,o,i),r(o,l,i),f(a,o,i),p=!0},p(o,i){const D={};i&1&&(D.$$scope={dirty:i,ctx:o}),n.$set(D);const y={};i&1&&(y.$$scope={dirty:i,ctx:o}),a.$set(y)},i(o){p||($(n.$$.fragment,o),$(a.$$.fragment,o),p=!0)},o(o){A(n.$$.fragment,o),A(a.$$.fragment,o),p=!1},d(o){m(n,o),o&&t(l),m(a,o)}}}function os(c){let n;return{c(){n=g("#")},l(l){n=h(l,"#")},m(l,a){r(l,n,a)},d(l){l&&t(n)}}}function ts(c){let n;return{c(){n=g("#")},l(l){n=h(l,"#")},m(l,a){r(l,n,a)},d(l){l&&t(n)}}}function ps(c){let n,l,a,p,o,i,D,y,V,S,w,T,u,b,Y,U,E,d,_,j,z,B,P;return y=new J({props:{class:"header-anchor",href:"#install","aria-hidden":"true",$$slots:{default:[ns]},$$scope:{ctx:c}}}),w=new ss({props:{values:["yarn","npm"],$$slots:{default:[es]},$$scope:{ctx:c}}}),b=new J({props:{class:"header-anchor",href:"#options","aria-hidden":"true",$$slots:{default:[os]},$$scope:{ctx:c}}}),E=new G({props:{lang:"typescript",ext:"ts",linesCount:8,code:`<pre><code><span class="line"><span style="color: #C792EA">type</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">WalletConnectOptions</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">bridge</span><span style="color: #89DDFF">?:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span><span style="color: #A6ACCD"> </span><span style="color: #464B5D; font-style: italic">// default = &#39;https://bridge.walletconnect.org&#39;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">qrcodeModalOptions</span><span style="color: #89DDFF">?:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">mobileLinks</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span><span style="color: #A6ACCD">[] </span><span style="color: #464B5D; font-style: italic">// set the order and list of mobile linking wallets</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">connectFirstChainId</span><span style="color: #89DDFF">?:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">boolean</span><span style="color: #A6ACCD"> </span><span style="color: #464B5D; font-style: italic">// if true, connects to the first network chain provided</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span></code></pre>`}}),_=new J({props:{class:"header-anchor",href:"#usage","aria-hidden":"true",$$slots:{default:[ts]},$$scope:{ctx:c}}}),B=new G({props:{lang:"typescript",ext:"ts",linesCount:26,code:`<pre><code><span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> Onboard </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">@web3-onboard/core</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> walletConnectModule </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">@web3-onboard/walletconnect</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #464B5D; font-style: italic">// initialize the module with options</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> walletConnect </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">walletConnectModule</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">bridge</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">YOUR_CUSTOM_BRIDGE_SERVER</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">qrcodeModalOptions</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">mobileLinks</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">rainbow</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">metamask</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">argent</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">trust</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">imtoken</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">pillar</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">]</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">connectFirstChainId</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #464B5D; font-style: italic">// can also initialize with no options...</span></span>
<span class="line"><span style="color: #464B5D; font-style: italic">// const walletConnect = walletConnectModule()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> onboard </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Onboard</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #464B5D; font-style: italic">// ... other Onboard options</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">wallets</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span></span>
<span class="line"><span style="color: #A6ACCD">    walletConnect</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #464B5D; font-style: italic">//... other wallets</span></span>
<span class="line"><span style="color: #A6ACCD">  ]</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> connectedWallets </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">await</span><span style="color: #A6ACCD"> onboard</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">connectWallet</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(connectedWallets)</span></span>
<span class="line"></span></code></pre>`}}),{c(){n=I("h1"),l=g("@web3-onboard/walletconnect"),a=k(),p=I("p"),o=g("Wallet module for connecting Ledger hardware wallets to web3-onboard"),i=k(),D=I("h2"),C(y.$$.fragment),V=g(" Install"),S=k(),C(w.$$.fragment),T=k(),u=I("h2"),C(b.$$.fragment),Y=g(" Options"),U=k(),C(E.$$.fragment),d=I("h2"),C(_.$$.fragment),j=g(" Usage"),z=k(),C(B.$$.fragment),this.h()},l(s){n=q(s,"H1",{});var e=H(n);l=h(e,"@web3-onboard/walletconnect"),e.forEach(t),a=x(s),p=q(s,"P",{});var L=H(p);o=h(L,"Wallet module for connecting Ledger hardware wallets to web3-onboard"),L.forEach(t),i=x(s),D=q(s,"H2",{id:!0,tabindex:!0});var v=H(D);F(y.$$.fragment,v),V=h(v," Install"),v.forEach(t),S=x(s),F(w.$$.fragment,s),T=x(s),u=q(s,"H2",{id:!0,tabindex:!0});var O=H(u);F(b.$$.fragment,O),Y=h(O," Options"),O.forEach(t),U=x(s),F(E.$$.fragment,s),d=q(s,"H2",{id:!0,tabindex:!0});var M=H(d);F(_.$$.fragment,M),j=h(M," Usage"),M.forEach(t),z=x(s),F(B.$$.fragment,s),this.h()},h(){W(D,"id","install"),W(D,"tabindex","-1"),W(u,"id","options"),W(u,"tabindex","-1"),W(d,"id","usage"),W(d,"tabindex","-1")},m(s,e){r(s,n,e),R(n,l),r(s,a,e),r(s,p,e),R(p,o),r(s,i,e),r(s,D,e),f(y,D,null),R(D,V),r(s,S,e),f(w,s,e),r(s,T,e),r(s,u,e),f(b,u,null),R(u,Y),r(s,U,e),f(E,s,e),r(s,d,e),f(_,d,null),R(d,j),r(s,z,e),f(B,s,e),P=!0},p(s,[e]){const L={};e&1&&(L.$$scope={dirty:e,ctx:s}),y.$set(L);const v={};e&1&&(v.$$scope={dirty:e,ctx:s}),w.$set(v);const O={};e&1&&(O.$$scope={dirty:e,ctx:s}),b.$set(O);const M={};e&1&&(M.$$scope={dirty:e,ctx:s}),_.$set(M)},i(s){P||($(y.$$.fragment,s),$(w.$$.fragment,s),$(b.$$.fragment,s),$(E.$$.fragment,s),$(_.$$.fragment,s),$(B.$$.fragment,s),P=!0)},o(s){A(y.$$.fragment,s),A(w.$$.fragment,s),A(b.$$.fragment,s),A(E.$$.fragment,s),A(_.$$.fragment,s),A(B.$$.fragment,s),P=!1},d(s){s&&t(n),s&&t(a),s&&t(p),s&&t(i),s&&t(D),m(y),s&&t(S),m(w,s),s&&t(T),s&&t(u),m(b),s&&t(U),m(E,s),s&&t(d),m(_),s&&t(z),m(B,s)}}}class $s extends Q{constructor(n){super(),X(this,n,null,ps,Z,{})}}export{$s as default};
