import { c as create_ssr_component, v as validate_component, a as add_attribute } from "../../../chunks/index-8615df27.js";
import { C as CodeFence } from "../../../chunks/CodeFence-7825ab22.js";
import "clsx";
import { C as CodeInline } from "../../../chunks/CodeInline-cb589915.js";
import { L as Link } from "../../../chunks/Link-6f161fc2.js";
import "@web3-onboard/core";
import "@web3-onboard/injected-wallets";
/* empty css                                                              */import { T as Tabs, a as TabPanel } from "../../../chunks/Tabs-dd4460a7.js";
/* empty css                                                                      */import "../../../chunks/contexts-8ef4e4d1.js";
import "../../../chunks/ssr-eca022de.js";
var uniswapExampleVideo = "/_app/immutable/assets/uniswap-example-3d42f47c.mp4";
const Uniswap_widget = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const frameworks = ["yarn", "npm"];
  return `<h1>Uniswap Widget Example</h1>
<p>This example will walk you through how to integrate ${validate_component(CodeInline, "CodeInline").$$render($$result, { code: "@web3-onboard" }, {}, {})} with the ${validate_component(Link, "Link").$$render($$result, {
    href: "https://docs.uniswap.org/sdk/widgets/swap-widget",
    target: "_blank",
    rel: "noopener noreferrer"
  }, {}, {
    default: () => {
      return `Uniswap Widget`;
    }
  })}! Add this web3-onboard enabled uniswap widget to your site to provide users with token swap capabilities quickly.</p>
<h2 id="${"step-1-install"}" tabindex="${"-1"}">${validate_component(Link, "Link").$$render($$result, {
    class: "header-anchor",
    href: "#step-1-install",
    "aria-hidden": "true"
  }, {}, {
    default: () => {
      return `#`;
    }
  })} Step 1: Install</h2>
<p>To start, we&#39;ll install the widgets library and the web3-onboard react library using npm or Yarn.</p>
${validate_component(Tabs, "Tabs").$$render($$result, { values: frameworks }, {}, {
    default: () => {
      return `${validate_component(TabPanel, "TabPanel").$$render($$result, { value: "yarn" }, {}, {
        default: () => {
          return `${validate_component(CodeFence, "CodeFence").$$render($$result, {
            lang: "bash",
            ext: "sh",
            linesCount: 2,
            rawCode: "yarn add @web3-onboard/react @web3-onboard/injected-wallets\n",
            showCopyCode: true,
            code: '<pre><code><span class="line"><span style="color: #A6ACCD">yarn add @web3-onboard/react @web3-onboard/injected-wallets</span></span>\n<span class="line"></span></code></pre>'
          }, {}, {})}`;
        }
      })}
  ${validate_component(TabPanel, "TabPanel").$$render($$result, { value: "npm" }, {}, {
        default: () => {
          return `${validate_component(CodeFence, "CodeFence").$$render($$result, {
            lang: "bash",
            ext: "sh",
            linesCount: 2,
            rawCode: "npm install @web3-onboard/react @web3-onboard/injected-wallets\n",
            showCopyCode: true,
            code: '<pre><code><span class="line"><span style="color: #A6ACCD">npm install @web3-onboard/react @web3-onboard/injected-wallets</span></span>\n<span class="line"></span></code></pre>'
          }, {}, {})}`;
        }
      })}`;
    }
  })}
<h2 id="${"step-2-import-configure"}" tabindex="${"-1"}">${validate_component(Link, "Link").$$render($$result, {
    class: "header-anchor",
    href: "#step-2-import-configure",
    "aria-hidden": "true"
  }, {}, {
    default: () => {
      return `#`;
    }
  })} Step 2: Import + Configure</h2>
<p>Import the libraries and any wallets you would like to use. For this example, we are going to use the injected wallets module. You can easily add more wallet support to your dapp via our other wallet modules. Additionally, we&#39;ll setup web3-onboard to support 2 chains: Ethereum mainnet and Polygon mainnet.</p>
<p>We&#39;ll create a file called ${validate_component(CodeInline, "CodeInline").$$render($$result, { code: "web3-onboard.ts" }, {}, {})} and then export the initialized ${validate_component(CodeInline, "CodeInline").$$render($$result, { code: "web3-onboard" }, {}, {})} instance and use this throughout our dapp.</p>
${validate_component(CodeFence, "CodeFence").$$render($$result, {
    title: "web3-onboard.ts",
    lang: "typescript",
    ext: "ts",
    linesCount: 41,
    rawCode: "import { init } from '@web3-onboard/react'\nimport injectedModule from '@web3-onboard/injected-wallets'\n\nconst INFURA_KEY = ''\n\nconst ethereumRopsten = {\n  id: '0x3',\n  token: 'rETH',\n  label: 'Ethereum Ropsten',\n  rpcUrl: `https://ropsten.infura.io/v3/${INFURA_KEY}`,\n}\n\nconst polygonMainnet = {\n  id: '0x89',\n  token: 'MATIC',\n  label: 'Polygon',\n  rpcUrl: 'https://matic-mainnet.chainstacklabs.com',\n}\n\nconst chains = [ethereumRopsten, polygonMainnet]\n\nconst wallets = [injectedModule()]\n\nconst appMetadata = {\n  name: 'Uniswap Widget Example',\n  icon: '<svg>My App Icon</svg>',\n  description:\n    'Example showcasing how to integrate web3-onboard with uniswap widget.',\n  recommendedInjectedWallets: [\n    { name: 'MetaMask', url: 'https://metamask.io' },\n    { name: 'Coinbase', url: 'https://wallet.coinbase.com/' },\n  ],\n}\n\n// initialize and export Onboard\nexport default init({\n  wallets,\n  chains,\n  appMetadata,\n})\n",
    showCopyCode: true,
    code: '<pre><code><span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">init</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">@web3-onboard/react</span><span style="color: #89DDFF">&#39;</span></span>\n<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> injectedModule </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">@web3-onboard/injected-wallets</span><span style="color: #89DDFF">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> INFURA_KEY </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> ethereumRopsten </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>\n<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">id</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">0x3</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>\n<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">token</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">rETH</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>\n<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">label</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Ethereum Ropsten</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>\n<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">rpcUrl</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">`</span><span style="color: #C3E88D">https://ropsten.infura.io/v3/</span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">INFURA_KEY</span><span style="color: #89DDFF">}`</span><span style="color: #89DDFF">,</span></span>\n<span class="line"><span style="color: #89DDFF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> polygonMainnet </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>\n<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">id</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">0x89</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>\n<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">token</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">MATIC</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>\n<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">label</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Polygon</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>\n<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">rpcUrl</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">https://matic-mainnet.chainstacklabs.com</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>\n<span class="line"><span style="color: #89DDFF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> chains </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> [ethereumRopsten</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> polygonMainnet]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> wallets </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> [</span><span style="color: #82AAFF">injectedModule</span><span style="color: #A6ACCD">()]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> appMetadata </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>\n<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Uniswap Widget Example</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>\n<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">icon</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">&lt;svg&gt;My App Icon&lt;/svg&gt;</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>\n<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">description</span><span style="color: #89DDFF">:</span></span>\n<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Example showcasing how to integrate web3-onboard with uniswap widget.</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>\n<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">recommendedInjectedWallets</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span></span>\n<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">MetaMask</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">url</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">https://metamask.io</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>\n<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Coinbase</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">url</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">https://wallet.coinbase.com/</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>\n<span class="line"><span style="color: #A6ACCD">  ]</span><span style="color: #89DDFF">,</span></span>\n<span class="line"><span style="color: #89DDFF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #464B5D; font-style: italic">// initialize and export Onboard</span></span>\n<span class="line"><span style="color: #89DDFF; font-style: italic">export</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">init</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span></span>\n<span class="line"><span style="color: #A6ACCD">  wallets</span><span style="color: #89DDFF">,</span></span>\n<span class="line"><span style="color: #A6ACCD">  chains</span><span style="color: #89DDFF">,</span></span>\n<span class="line"><span style="color: #A6ACCD">  appMetadata</span><span style="color: #89DDFF">,</span></span>\n<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>\n<span class="line"></span></code></pre>'
  }, {}, {})}<h2 id="${"step-3-add-the-react-hooks"}" tabindex="${"-1"}">${validate_component(Link, "Link").$$render($$result, {
    class: "header-anchor",
    href: "#step-3-add-the-react-hooks",
    "aria-hidden": "true"
  }, {}, {
    default: () => {
      return `#`;
    }
  })} Step 3: Add the react hooks</h2>
<p>In our main ${validate_component(CodeInline, "CodeInline").$$render($$result, { code: "App" }, {}, {})} component we&#39;ll setup our Web3-Onboard react hooks. For this example we&#39;ll be using the ${validate_component(CodeInline, "CodeInline").$$render($$result, { code: "useConnectWallet" }, {}, {})} react hook. This will give us access to the currently connected wallets, as well as, methods for us to facilitate connecting and disconnecting a wallet.</p>
${validate_component(CodeFence, "CodeFence").$$render($$result, {
    title: "App.tsx",
    lang: "tsx",
    ext: "tsx",
    linesCount: 35,
    rawCode: "import { useState, useEffect } from 'react'\n\nimport { ethers } from 'ethers'\nimport { useConnectWallet } from '@web3-onboard/react'\n\nexport default function App() {\n\n  const [{ wallet, connecting }, connect, disconnect] = useConnectWallet()\n  const [provider, setProvider] = useState<ethers.providers.Web3Provider>()\n\n  // Once the wallet is connected the provider will be defined and we'll set the provider value\n  // This provider will then be passed to the Uniswap component in the next step.\n  useEffect(() => {\n    if (wallet?.provider) {\n      setProvider(new ethers.providers.Web3Provider(wallet.provider, 'any'))\n    } else {\n      // Reset the provider back to 'undefined' such that the \n      // connect wallet option will reappear in the uniswap modal\n      setProvider(undefined)\n    }\n  }, [wallet])\n\n  // The connect wallet function which will be based to the Uniswap component in the next step.\n  const connectWallet = () => {\n    connect()\n  }\n\n  return (\n    <main>\n      <h1>Uniswap Swap Widget</h1>\n      // Uniswap widget will go here\n    </main>\n  )\n}\n",
    showCopyCode: true,
    code: '<pre><code><span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">useState</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">useEffect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">react</span><span style="color: #89DDFF">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ethers</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">ethers</span><span style="color: #89DDFF">&#39;</span></span>\n<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">useConnectWallet</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">@web3-onboard/react</span><span style="color: #89DDFF">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #89DDFF; font-style: italic">export</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">App</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">[{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">wallet</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">connecting</span><span style="color: #F07178"> </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">connect</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">disconnect</span><span style="color: #89DDFF">]</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">useConnectWallet</span><span style="color: #F07178">()</span></span>\n<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">[</span><span style="color: #A6ACCD">provider</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">setProvider</span><span style="color: #89DDFF">]</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">useState</span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">ethers</span><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">providers</span><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">Web3Provider</span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #89DDFF">  </span><span style="color: #464B5D; font-style: italic">// Once the wallet is connected the provider will be defined and we&#39;ll set the provider value</span></span>\n<span class="line"><span style="color: #89DDFF">  </span><span style="color: #464B5D; font-style: italic">// This provider will then be passed to the Uniswap component in the next step.</span></span>\n<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">useEffect</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>\n<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">wallet</span><span style="color: #89DDFF">?.</span><span style="color: #A6ACCD">provider</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>\n<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">setProvider</span><span style="color: #F07178">(</span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ethers</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">providers</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Web3Provider</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">wallet</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">provider</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">any</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">))</span></span>\n<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>\n<span class="line"><span style="color: #89DDFF">      </span><span style="color: #464B5D; font-style: italic">// Reset the provider back to &#39;undefined&#39; such that the </span></span>\n<span class="line"><span style="color: #89DDFF">      </span><span style="color: #464B5D; font-style: italic">// connect wallet option will reappear in the uniswap modal</span></span>\n<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">setProvider</span><span style="color: #F07178">(</span><span style="color: #89DDFF">undefined</span><span style="color: #F07178">)</span></span>\n<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>\n<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">wallet</span><span style="color: #F07178">])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #89DDFF">  </span><span style="color: #464B5D; font-style: italic">// The connect wallet function which will be based to the Uniswap component in the next step.</span></span>\n<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">connectWallet</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>\n<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">connect</span><span style="color: #F07178">()</span></span>\n<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> (</span></span>\n<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">main</span><span style="color: #89DDFF">&gt;</span></span>\n<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">h1</span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD">Uniswap Swap Widget</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">h1</span><span style="color: #89DDFF">&gt;</span></span>\n<span class="line"><span style="color: #A6ACCD">      // Uniswap widget will go here</span></span>\n<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">main</span><span style="color: #89DDFF">&gt;</span></span>\n<span class="line"><span style="color: #F07178">  )</span></span>\n<span class="line"><span style="color: #89DDFF">}</span></span>\n<span class="line"></span></code></pre>'
  }, {}, {})}<h2 id="${"step-4-add-the-uniswap-widget"}" tabindex="${"-1"}">${validate_component(Link, "Link").$$render($$result, {
    class: "header-anchor",
    href: "#step-4-add-the-uniswap-widget",
    "aria-hidden": "true"
  }, {}, {
    default: () => {
      return `#`;
    }
  })} Step 4: Add the Uniswap widget</h2>
<p>To begin, we&#39;ll import the ${validate_component(CodeInline, "CodeInline").$$render($$result, { code: "SwapWidget" }, {}, {})} along with the corresponding fonts. We&#39;ll define a few constants that will be passed to the swap widget:</p>
<ul><li>The json rpc endpoint that will be used to provide trade quotes prior to the user connecting a wallet</li>
<li>The token list url used to provide a list of tokens for the user to select from</li>
<li>The Uniswap token address which will be used as the default selected token</li></ul>
<p>To learn more about all of the ${validate_component(CodeInline, "CodeInline").$$render($$result, { code: "SwapWidget" }, {}, {})} props, check out ${validate_component(Link, "Link").$$render($$result, {
    href: "https://docs.uniswap.org/sdk/widgets/swap-widget/api",
    target: "_blank",
    rel: "noopener noreferrer"
  }, {}, {
    default: () => {
      return `the api reference`;
    }
  })}.</p>
<p>We will take the ${validate_component(CodeInline, "CodeInline").$$render($$result, { code: "connectWallet" }, {}, {})} function that we previously defined and pass it to the ${validate_component(CodeInline, "CodeInline").$$render($$result, { code: "onConnectWallet" }, {}, {})} prop on the ${validate_component(CodeInline, "CodeInline").$$render($$result, { code: "SwapWidget" }, {}, {})}. This will allow us to initiate the web3-onboard connect wallet modal once the user clicks the on the connect wallet button within the ${validate_component(CodeInline, "CodeInline").$$render($$result, { code: "SwapWidget" }, {}, {})}. Finally, we&#39;ll also pass the ${validate_component(CodeInline, "CodeInline").$$render($$result, { code: "provider" }, {}, {})} to the SwapWidget such that once the ${validate_component(CodeInline, "CodeInline").$$render($$result, { code: "provider" }, {}, {})} is defined, the ${validate_component(CodeInline, "CodeInline").$$render($$result, { code: "SwapWidget" }, {}, {})} will be able to use the wallet&#39;s provider to facilitate the swap.</p>
${validate_component(CodeFence, "CodeFence").$$render($$result, {
    title: "App.tsx",
    lang: "tsx",
    ext: "tsx",
    linesCount: 62,
    highlightLines: [[6, 13], [40, 58]],
    rawCode: `import { useState, useEffect } from 'react'

import { ethers } from 'ethers'
import { useConnectWallet } from '@web3-onboard/react'

import { SwapWidget } from '@uniswap/widgets'
import '@uniswap/widgets/fonts.css'

const JSON_RPC_URL = 'https://cloudflare-eth.com'
// The url of the default uniswap token list. This list will be passed to the Uniswap component
// and will appear by default in the token selector UI.
const TOKEN_LIST = 'https://gateway.ipfs.io/ipns/tokens.uniswap.org'
const UNI = '0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984'

export default function App() {

  const [{ wallet, connecting }, connect, disconnect] = useConnectWallet()
  const [provider, setProvider] = useState<ethers.providers.Web3Provider>()

  // Once the wallet is connected the provider will be defined and we'll set the provider value
  // This provider will then be passed to the Uniswap component below.
  useEffect(() => {
    if (wallet?.provider) {
      setProvider(new ethers.providers.Web3Provider(wallet.provider, 'any'))
    } else {
      // Reset the provider back to 'undefined' such that the 
      // connect wallet option will reappear in the uniswap modal
      setProvider(undefined)
    }
  }, [wallet])

  // The connect wallet function which will be based to the Uniswap component below.
  const connectWallet = () => {
    connect()
  }

  return (
    <main>
      <h1>Uniswap Swap Widget</h1>
      <SwapWidget
        jsonRpcEndpoint={JSON_RPC_URL}
        // Specifies the set of tokens that appear by default in the token selector list.
        tokenList={TOKEN_LIST}
        // This is the provider that we receive from the user's connected wallet
        provider={provider}
        // When the Uniswap connect wallet button gets hit
        // the function gets called. We'll hook this up to 
        // our connect wallet method from web3-onboard.
        onConnectWallet={connectWallet}
        // Address of the token to be selected by default in the 
        // input field (e.g. USDC) for each network chain ID.
        defaultInputTokenAddress="NATIVE"
        // Default amount for the input field in this case 1 ETH
        defaultInputAmount="1"
        // Address of the token to be selected by default in the input field (e.g. USDC) 
        // for each network chain ID.
        defaultOutputTokenAddress={UNI}
      />
    </main>
  )
}
`,
    showCopyCode: true,
    code: '<pre><code><span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">useState</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">useEffect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">react</span><span style="color: #89DDFF">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ethers</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">ethers</span><span style="color: #89DDFF">&#39;</span></span>\n<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">useConnectWallet</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">@web3-onboard/react</span><span style="color: #89DDFF">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">SwapWidget</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">@uniswap/widgets</span><span style="color: #89DDFF">&#39;</span></span>\n<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">@uniswap/widgets/fonts.css</span><span style="color: #89DDFF">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> JSON_RPC_URL </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">https://cloudflare-eth.com</span><span style="color: #89DDFF">&#39;</span></span>\n<span class="line"><span style="color: #464B5D; font-style: italic">// The url of the default uniswap token list. This list will be passed to the Uniswap component</span></span>\n<span class="line"><span style="color: #464B5D; font-style: italic">// and will appear by default in the token selector UI.</span></span>\n<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> TOKEN_LIST </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">https://gateway.ipfs.io/ipns/tokens.uniswap.org</span><span style="color: #89DDFF">&#39;</span></span>\n<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> UNI </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984</span><span style="color: #89DDFF">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #89DDFF; font-style: italic">export</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">App</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">[{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">wallet</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">connecting</span><span style="color: #F07178"> </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">connect</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">disconnect</span><span style="color: #89DDFF">]</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">useConnectWallet</span><span style="color: #F07178">()</span></span>\n<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">[</span><span style="color: #A6ACCD">provider</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">setProvider</span><span style="color: #89DDFF">]</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">useState</span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">ethers</span><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">providers</span><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">Web3Provider</span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #89DDFF">  </span><span style="color: #464B5D; font-style: italic">// Once the wallet is connected the provider will be defined and we&#39;ll set the provider value</span></span>\n<span class="line"><span style="color: #89DDFF">  </span><span style="color: #464B5D; font-style: italic">// This provider will then be passed to the Uniswap component below.</span></span>\n<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">useEffect</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>\n<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">wallet</span><span style="color: #89DDFF">?.</span><span style="color: #A6ACCD">provider</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>\n<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">setProvider</span><span style="color: #F07178">(</span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ethers</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">providers</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Web3Provider</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">wallet</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">provider</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">any</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">))</span></span>\n<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>\n<span class="line"><span style="color: #89DDFF">      </span><span style="color: #464B5D; font-style: italic">// Reset the provider back to &#39;undefined&#39; such that the </span></span>\n<span class="line"><span style="color: #89DDFF">      </span><span style="color: #464B5D; font-style: italic">// connect wallet option will reappear in the uniswap modal</span></span>\n<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">setProvider</span><span style="color: #F07178">(</span><span style="color: #89DDFF">undefined</span><span style="color: #F07178">)</span></span>\n<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>\n<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">wallet</span><span style="color: #F07178">])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #89DDFF">  </span><span style="color: #464B5D; font-style: italic">// The connect wallet function which will be based to the Uniswap component below.</span></span>\n<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">connectWallet</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>\n<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">connect</span><span style="color: #F07178">()</span></span>\n<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> (</span></span>\n<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">main</span><span style="color: #89DDFF">&gt;</span></span>\n<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">h1</span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD">Uniswap Swap Widget</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">h1</span><span style="color: #89DDFF">&gt;</span></span>\n<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">SwapWidget</span></span>\n<span class="line"><span style="color: #89DDFF">        </span><span style="color: #C792EA">jsonRpcEndpoint</span><span style="color: #89DDFF">={</span><span style="color: #A6ACCD">JSON_RPC_URL</span><span style="color: #89DDFF">}</span></span>\n<span class="line"><span style="color: #89DDFF">        </span><span style="color: #464B5D; font-style: italic">// Specifies the set of tokens that appear by default in the token selector list.</span></span>\n<span class="line"><span style="color: #89DDFF">        </span><span style="color: #C792EA">tokenList</span><span style="color: #89DDFF">={</span><span style="color: #A6ACCD">TOKEN_LIST</span><span style="color: #89DDFF">}</span></span>\n<span class="line"><span style="color: #89DDFF">        </span><span style="color: #464B5D; font-style: italic">// This is the provider that we receive from the user&#39;s connected wallet</span></span>\n<span class="line"><span style="color: #89DDFF">        </span><span style="color: #C792EA">provider</span><span style="color: #89DDFF">={</span><span style="color: #A6ACCD">provider</span><span style="color: #89DDFF">}</span></span>\n<span class="line"><span style="color: #89DDFF">        </span><span style="color: #464B5D; font-style: italic">// When the Uniswap connect wallet button gets hit</span></span>\n<span class="line"><span style="color: #89DDFF">        </span><span style="color: #464B5D; font-style: italic">// the function gets called. We&#39;ll hook this up to </span></span>\n<span class="line"><span style="color: #89DDFF">        </span><span style="color: #464B5D; font-style: italic">// our connect wallet method from web3-onboard.</span></span>\n<span class="line"><span style="color: #89DDFF">        </span><span style="color: #C792EA">onConnectWallet</span><span style="color: #89DDFF">={</span><span style="color: #A6ACCD">connectWallet</span><span style="color: #89DDFF">}</span></span>\n<span class="line"><span style="color: #89DDFF">        </span><span style="color: #464B5D; font-style: italic">// Address of the token to be selected by default in the </span></span>\n<span class="line"><span style="color: #89DDFF">        </span><span style="color: #464B5D; font-style: italic">// input field (e.g. USDC) for each network chain ID.</span></span>\n<span class="line"><span style="color: #89DDFF">        </span><span style="color: #C792EA">defaultInputTokenAddress</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">NATIVE</span><span style="color: #89DDFF">&quot;</span></span>\n<span class="line"><span style="color: #89DDFF">        </span><span style="color: #464B5D; font-style: italic">// Default amount for the input field in this case 1 ETH</span></span>\n<span class="line"><span style="color: #89DDFF">        </span><span style="color: #C792EA">defaultInputAmount</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">1</span><span style="color: #89DDFF">&quot;</span></span>\n<span class="line"><span style="color: #89DDFF">        </span><span style="color: #464B5D; font-style: italic">// Address of the token to be selected by default in the input field (e.g. USDC) </span></span>\n<span class="line"><span style="color: #89DDFF">        </span><span style="color: #464B5D; font-style: italic">// for each network chain ID.</span></span>\n<span class="line"><span style="color: #89DDFF">        </span><span style="color: #C792EA">defaultOutputTokenAddress</span><span style="color: #89DDFF">={</span><span style="color: #A6ACCD">UNI</span><span style="color: #89DDFF">}</span></span>\n<span class="line"><span style="color: #89DDFF">      /&gt;</span></span>\n<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">main</span><span style="color: #89DDFF">&gt;</span></span>\n<span class="line"><span style="color: #F07178">  )</span></span>\n<span class="line"><span style="color: #89DDFF">}</span></span>\n<span class="line"></span></code></pre>'
  }, {}, {})}<h2 id="${"step-5-wrap-the-context-provider"}" tabindex="${"-1"}">${validate_component(Link, "Link").$$render($$result, {
    class: "header-anchor",
    href: "#step-5-wrap-the-context-provider",
    "aria-hidden": "true"
  }, {}, {
    default: () => {
      return `#`;
    }
  })} Step 5: Wrap the context provider</h2>
<p>Finally, we&#39;ll wrap our main App component with the ${validate_component(CodeInline, "CodeInline").$$render($$result, { code: "web3-onboard" }, {}, {})} context provider in order for us to access the ${validate_component(CodeInline, "CodeInline").$$render($$result, { code: "web3-onboard" }, {}, {})} instance throughout our app.</p>
${validate_component(CodeFence, "CodeFence").$$render($$result, {
    title: "index.tsx",
    lang: "javascript",
    ext: "js",
    linesCount: 19,
    highlightLines: [[8, 9], [13, 15]],
    rawCode: "import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Web3OnboardProvider } from '@web3-onboard/react'\n\nimport './index.css'\nimport App from './App.tsx'\n\n// Import the web3-onboard singleton\nimport web3Onboard from './web3-onboard'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Web3OnboardProvider web3Onboard={web3Onboard}>\n      <App />\n    </Web3OnboardProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n",
    showCopyCode: true,
    code: '<pre><code><span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> React </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">react</span><span style="color: #89DDFF">&#39;</span></span>\n<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> ReactDOM </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">react-dom</span><span style="color: #89DDFF">&#39;</span></span>\n<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Web3OnboardProvider</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">@web3-onboard/react</span><span style="color: #89DDFF">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">./index.css</span><span style="color: #89DDFF">&#39;</span></span>\n<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> App </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">./App.tsx</span><span style="color: #89DDFF">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #464B5D; font-style: italic">// Import the web3-onboard singleton</span></span>\n<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> web3Onboard </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">./web3-onboard</span><span style="color: #89DDFF">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #A6ACCD">ReactDOM</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">render</span><span style="color: #A6ACCD">(</span></span>\n<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">React.StrictMode</span><span style="color: #89DDFF">&gt;</span></span>\n<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">Web3OnboardProvider</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">web3Onboard</span><span style="color: #89DDFF">={</span><span style="color: #A6ACCD">web3Onboard</span><span style="color: #89DDFF">}&gt;</span></span>\n<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">App</span><span style="color: #89DDFF"> /&gt;</span></span>\n<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #FFCB6B">Web3OnboardProvider</span><span style="color: #89DDFF">&gt;</span></span>\n<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;/</span><span style="color: #FFCB6B">React.StrictMode</span><span style="color: #89DDFF">&gt;,</span></span>\n<span class="line"><span style="color: #A6ACCD">  document</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getElementById</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">root</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span></span>\n<span class="line"><span style="color: #A6ACCD">)</span></span>\n<span class="line"></span></code></pre>'
  }, {}, {})}<h2 id="${"see-in-action"}" tabindex="${"-1"}">${validate_component(Link, "Link").$$render($$result, {
    class: "header-anchor",
    href: "#see-in-action",
    "aria-hidden": "true"
  }, {}, {
    default: () => {
      return `#`;
    }
  })} See in action!</h2>
<video width="${"100%"}" height="${"240"}" style="${"border-radius: 0.375rem"}" controls><source${add_attribute("src", uniswapExampleVideo, 0)} type="${"video/mp4"}">
  Your browser does not support the video tag.
</video>
<h2 id="${"live-example-\u{1F680}"}" tabindex="${"-1"}">${validate_component(Link, "Link").$$render($$result, {
    class: "header-anchor",
    href: "#live-example-\u{1F680}",
    "aria-hidden": "true"
  }, {}, {
    default: () => {
      return `#`;
    }
  })} Live Example \u{1F680}</h2>
<p>Check out the live example on StackBlitz! StackBlitz will install and build the package in the below container</p>
<iframe title="${"Uniswap + Web3-Onboard"}" src="${"https://stackblitz.com/edit/node-avakex?ctl=1&embed=1&hideExplorer=1&hideNavigation=1&view=preview"}" width="${"100%"}" height="${"500px"}" style="${"border-radius: 0.375rem"}"></iframe>`;
});
export { Uniswap_widget as default };
